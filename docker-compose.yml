version: '3.8'

# Orquestación de servicios para el challenge:
# - mitre-mcp: servidor MCP externo (MITRE ATT&CK)
# - datasec-agent: API FastAPI con RAG y agentes
# - dbir-ingest: job one-shot para poblar vector_db desde el PDF
# - chromadb (opcional): Chroma REST; por defecto usamos persist_directory local
# - ollama (opcional): LLM local
# - redis: docstore simple para ParentDocumentRetriever

services:
  mitre-mcp:
    build:
      context: .
      dockerfile: docker/Dockerfile.mitre-mcp
    ports:
      - "8080:8080"
    restart: unless-stopped
    healthcheck:
      # Chequeo básico HTTP del servidor MCP
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:8080', timeout=2)\""]
      interval: 15s
      timeout: 5s
      retries: 10

  datasec-agent:
    build: .
    image: meli-datasec-challenge-app
    env_file:
      - .env
    environment:
      # Configurar comunicación con el MCP externo
      - MCP_EXTERNAL_HOST=mitre-mcp
      - MCP_EXTERNAL_PORT=8080
      - MCP_EXTERNAL_PROTOCOL=http
    volumes:
      # PDF y data de ejemplo se montan como solo-lectura
      - ./data:/app/data:ro
      # Logs y base vectorial se persisten en el host
      - ./logs:/app/logs
      - ./vector_db:/app/vector_db
    ports:
      - "8000:8000"
    restart: unless-stopped
    depends_on:
      - mitre-mcp
      - redis
      # chromadb es opcional; si deseas usar REST comenta CHROMA_DB_HOST en .env
      - chromadb
    healthcheck:
      # Healthcheck de la API principal
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:8000/health', timeout=2)\""]
      interval: 15s
      timeout: 5s
      retries: 5

  # Job de ingesta (ejecutar manualmente cuando cambie el PDF)
  dbir-ingest:
    build: .
    image: meli-datasec-challenge-app
    env_file:
      - .env
    command: ["python", "-m", "src.rag_system.ingest"]
    volumes:
      - ./data:/app/data:ro
      - ./vector_db:/app/vector_db
    restart: "no"
    depends_on:
      - redis
      - chromadb

  # Servicio opcional de ChromaDB remoto (útil para escalar o separar estado)
  chromadb:
    image: chromadb/chroma:latest
    ports:
      - "8001:8000"
    volumes:
      - ./vector_db:/chroma/chroma/
    environment:
      - IS_PERSISTENT=TRUE
    restart: unless-stopped

  # Servicio opcional de Ollama para LLM local
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama:/root/.ollama
    restart: unless-stopped

  # Docstore Redis (persistente y simple)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped

volumes:
  ollama:
  # vector_db lo provee el bind-mount
